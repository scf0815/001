package main

import "fmt"

//make函数创建切片
func main() {
	s1 := make([]int, 5, 10) //5代表长度，10代表容量，10不写默认长度=容量
	fmt.Printf("s1: %v\n", s1)
	fmt.Printf("cap(s1): %v\n", cap(s1))

	//切片本质：就是一个框，框住了一块连续的内存，属于引用类型，真实的数据都存在底层数组里
	//判断一个切片是否是空的，用len()==0
	//切片的遍历和数组没有区别

	//append为切片追加元素
	s2 := []string{"北京", "上海", "深圳"}
	fmt.Println(cap(s2))
	s2 = append(s2, "广州")
	fmt.Printf("s2: %v\n", s2)
	fmt.Println(cap(s2))
	//调用append函数必须用原来的切片变量接收返回值
	//原来数组容量装不下，就会换一个新的底层数组
	//首先判断，如果新申请容量大于二倍的旧容量，最终容量=新申请容量
	//其次，如果旧切片的长度<1024，最终容量=2倍旧容量
	//如果旧切片的长度>=1024,最终容量=旧容量循环增加1/4，直至大于新申请容量
	//切片的扩容还会根据切切片中元素类型不同而改变
	s2 = append(s2, "苏州", "杭州", "成都")
	fmt.Printf("s2: %v\n", s2)
	fmt.Printf("cap(s2): %v\n", cap(s2))
	s3 := []string{"澳门", "香港", "台湾"}
	s2 = append(s2, s3...) //两个切片相加，在后面加入...,代表拆开切片内容
	fmt.Printf("s2: %v\n", s2)

}
